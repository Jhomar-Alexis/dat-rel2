<!DOCTYPE html>
<html>
  <head>
    <title>Gráficas en tiempo real</title>
  </head>
  <body style="display: grid; justify-content: center; background-color: black">
    <br />
    <h1
      style="
        color: white;
        text-align: center;
        font-weight: bold;
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        letter-spacing: 3px;
        font-size: 50px;
      "
    >
      DATOS EN TIEMPO REAL
    </h1>
    <div
      id="wave-chart"
      style="width: 1000px; height: 500px; background: greenyellow"
    ></div>
    <br />
    <div
      id="bar-chart"
      style="width: 1000px; height: 500px; background: orange"
    ></div>
    <br />
    <div
      id="histogram-chart"
      style= "width: 1000px; height: 500px; background-color: yellow"
    ></div>
    <br />

    <script src="https://cdn.jsdelivr.net/npm/echarts@5.2.2/dist/echarts.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script type="text/javascript">
      var chartDom = document.getElementById("wave-chart");
      var waveChart = echarts.init(chartDom);
      var chartDom = document.getElementById("bar-chart");
      var barChart = echarts.init(chartDom);
      var chartDom = document.getElementById("histogram-chart");
      var histogramChart = echarts.init(chartDom);

      // Aquí es donde deberías construir tus gráficas con los datos proporcionados
      var waveData = [];
      var barData = [];
      var histogramData = [];

      const socket = io.connect("http://localhost:3000");

      socket.on("connect", () => {
        console.log("socket conectado");
      });

      //GRAFICA DE OLA
      socket.on("data", function (data) {
        waveData.push(data);
        histogramData.push(data.value);
        updateHistogram();
        const tiempo = new Date(data.timestamp);
        if (tiempo.getMinutes() % 2 === 0) {
          const index = barData.findIndex(
            (e) => new Date(e.timestamp).getMinutes() == tiempo.getMinutes()
          );
          if (index >= 0) {
            barData[index].value = data.value;
          } else barData.push(data);
        }
        if (waveData.length % 100 === 0) {
          waveData = waveData.slice(-80);
        }

        updatedChart();
        waveOption = {
          xAxis: {
            type: "category",
            data: waveData.map((t) => new Date(t.timestamp).toLocaleString()),
          },
          yAxis: {
            type: "value",
          },
          series: [
            {
              data: waveData.map((t) => t.value),
              type: "line",
              smooth: true,
            },
          ],
        };
        waveChart.setOption(waveOption);
      });

      function updatedChart() {
        barOption = {
          xAxis: {
            type: "category",
            data: barData.map((t) => new Date(t.timestamp).toLocaleString()),
          },
          yAxis: {
            type: "value",
          },
          series: [
            {
              data: barData.map((t) => t.value),
              type: "bar",
              smooth: true,
            },
          ],
        };
        barChart.setOption(barOption);
      }

      histogramOption = {
        xAxis: {
          type: "category",
          data: [],
        },
        yAxis: {
          type: "value",
        },
        series: [
          {
            name: "Histograma de onda",
            type: "bar",
            data: [],
            barwidth:"800",
            itemStyle: {},
          },
        ],
      };

      histogramChart.setOption(histogramOption);

      function updateHistogram() {
        var bins = 30; // number of bins
        var min = Math.min(...histogramData);
        var max = Math.max(...histogramData);
        var binSize = (max - min) / bins;
        var histogram = new Array(bins).fill(0);

        // Calculate histogram data
        for (var i = 0; i < histogramData.length; i++) {
          var binIndex = Math.floor((histogramData[i] - min) / binSize);
          if (binIndex >= bins) {
            binIndex = bins - 1;
          }
          histogram[binIndex]++;
        }

        var yAxisData = [];
        var seriesData = [];
        for (var i = 0; i < bins; i++) {
          yAxisData.push(
            (min + i * binSize).toFixed(2) +
              "-" +
              (min + (i + 1) * binSize).toFixed(2)
          );
          seriesData.push(histogram[i]);
        }

        histogramOption.xAxis.data = yAxisData;
        histogramOption.series[0].data = seriesData;
        histogramChart.setOption(histogramOption);
      }
 // update histogram every 2 seconds
    </script>
  </body>
</html>
